{
    "inputs": [
        {
            "type": "table",
            "name": "table",
            "format": "rows",
            "x": 54,
            "y": 61
        },
        {
            "type": "number",
            "description": "how many rows should the output table have?",
            "name": "outRowCount",
            "format": "number",
            "x": 56,
            "y": 254
        }
    ],
    "name": "Mammal tree extraction",
    "outputs": [
        {
            "format": "newick",
            "type": "tree",
            "description": "output tree returned from OTL",
            "name": "tree",
            "x": 1177,
            "y": 293
        }
    ],
    "connections": [
        {
            "name": "table",
            "input_step": "TableSelectRandomRows",
            "input": "table"
        },
        {
            "name": "outRowCount",
            "input_step": "TableSelectRandomRows",
            "input": "outRowCount"
        },
        {
            "output_step": "TableSelectRandomRows",
            "output": "outTable",
            "input_step": "TableUnderscoreToSpace",
            "input": "table"
        },
        {
            "output_step": "TableUnderscoreToSpace",
            "output": "tableOut",
            "input_step": "LookupOpenTreeNames",
            "input": "nameTable"
        },
        {
            "output_step": "LookupOpenTreeNames",
            "output": "outTable",
            "input_step": "GetOTLtreeFromTableWithIDs",
            "input": "table"
        },
        {
            "name": "tree",
            "output_step": "GetOTLtreeFromTableWithIDs",
            "output": "tree"
        }
    ],
    "steps": [
        {
            "x": 294,
            "y": 139,
            "name": "TableSelectRandomRows",
            "task": {
                "inputs": [
                    {
                        "type": "table",
                        "name": "table",
                        "format": "rows"
                    },
                    {
                        "type": "number",
                        "description": "how many rows should the output table have?",
                        "name": "outRowCount",
                        "format": "number"
                    }
                ],
                "outputs": [
                    {
                        "type": "table",
                        "name": "outTable",
                        "format": "rows"
                    }
                ],
                "mode": "python",
                "name": "TableSelectRandomRows",
                "script": "from random import randint\n#\n# pick random rows out of a table, according to the rowcount passed as an argument\n\n# input: table\n# input: outRowCount - how many rows to pick from the input table\n# output: outTable\n\ntableRowCount = len(table['rows'])\noutColumns = []\n\n# loop the number of times in the output row count; selecting a random row each time\nfor i in range(outRowCount):\n    outColumns.append(table['rows'][randint(0,tableRowCount-1)])\n    \noutTable = {}\noutTable['fields'] = table['fields']\noutTable['rows'] = outColumns\n",
                "x": 294,
                "y": 139
            }
        },
        {
            "x": 531,
            "y": 140,
            "name": "TableUnderscoreToSpace",
            "task": {
                "inputs": [
                    {
                        "type": "table",
                        "description": "input table with underscores in species names",
                        "name": "table",
                        "format": "rows"
                    }
                ],
                "outputs": [
                    {
                        "type": "table",
                        "description": "same as input table but name and species columns have replaced underscores",
                        "name": "tableOut",
                        "format": "rows"
                    }
                ],
                "mode": "python",
                "name": "TableUnderscoreToSpace",
                "script": "# input: table - table:rows type representing a trait matrix, with \"species\" or \"name\" as the species name\n# output: tableOut - same table with substituted names  \n\n# this routine replaces underscores in species names with spaces.  E.g.  \"heliconia_robusta\" becomes \"heliconia robusta\".\n\ncolumnNames = table['fields']\noutrows = []\n\n# go through the rows and change underscores to spaces for name and species columns.  output is accumulated in outrows\nfor i in range(len(table['rows'])):\n    row = table['rows'][i]\n    if 'name' in row.keys():\n        newname = row['name'].replace('_',' ')\n        row['name'] = newname\n    elif 'species' in row.keys():\n        newname = row['species'].replace('_',' ')\n        row['species'] = newname\n    outrows.append(row)\n\n# compose output object\ntableOut = {}\ntableOut['fields'] = columnNames\ntableOut['rows'] = outrows\n\n\n    \n        ",
                "x": 531,
                "y": 140
            }
        },
        {
            "x": 774,
            "y": 144,
            "name": "LookupOpenTreeNames",
            "task": {
                "inputs": [
                    {
                        "format": "rows",
                        "type": "table",
                        "description": "single column table of scientific names",
                        "name": "nameTable"
                    }
                ],
                "script": "#\n# LookupOpenTreeNames\n#\n# description: this analysis expects a single-column input table consisting of scientific names.\n# The analysis consults the OpenTree API and extracts canonical names from the OpenTree taxonomy.\n# The output table consists of three-columns, with the OpenTree name and taxonomy ID columns added to the input. \n# \n# input: nameTable - single column of scientific names (table:rows format)\n# output: outTable - three column table with OpenTree name and ID appended.\n#\n\nimport requests\n\n# look at the rows of the input table\nmatrixEntries = nameTable['rows']\n\n# find out the title of the columns in this matrix. Assuming this is a single column table\ncolumnHeader = nameTable['fields'][0]\n\noutColumns = []\n\ncount = 0\nfor matrixEntry in matrixEntries:\n    # build an OTL query to return the matching ottId we want to use to request taxa \n    payload = {'queryString': matrixEntry[columnHeader],'contextName':'All life'}\n    resp = requests.post('https://api.opentreeoflife.org/taxomachine/v1/autocompleteBoxQuery',data=payload)\n\n#    if (resp.json()) and (resp.json()[0]['name']) and ((resp.json()[0]['higher']) != True):\n    if (resp.json()) and (resp.json()[0]['name']):\n        count += 1\n        # now write an output record based on the input, but add  the OpenTree canonical name and taxonomy ID\n        outputRecord = {}\n        outputRecord[columnHeader] = matrixEntry[columnHeader]\n        outputRecord['ottName'] =  resp.json()[0]['name']\n        outputRecord['ottId'] = resp.json()[0]['ottId']\n        outColumns.append(outputRecord)\n    else:\n        print(\"found no TNRS match for:\",matrixEntry[columnHeader])\n\nprint(\"found OTL match for \",count, \" out of \",len(matrixEntries),\" matrix entries\")\n\n# build the headers for the output table\naugmentedColumnHeaders = [columnHeader, 'ottName','ottId']\n\n# setup the output in table:rows format with the headers explicitly listed\noutTable = {'fields': augmentedColumnHeaders,\n            'rows':  outColumns}\n            \n     ",
                "mode": "python",
                "name": "LookupOpenTreeNames",
                "outputs": [
                    {
                        "format": "rows",
                        "type": "table",
                        "description": "three column table of original names, OpenTree TNRS names, and OpenTree taxonomy IDs",
                        "name": "outTable"
                    }
                ],
                "x": 774,
                "y": 144
            }
        },
        {
            "x": 1015,
            "y": 137,
            "name": "GetOTLtreeFromTableWithIDs",
            "task": {
                "inputs": [
                    {
                        "format": "rows",
                        "type": "table",
                        "description": "input matrix containing a column ottid",
                        "name": "table"
                    }
                ],
                "script": "import requests\nimport json\n\nrows = table['rows']\nidList = []\nfor i in range(len(rows)):\n    idList.append(rows[i]['ottId'])\n\n# lookup the tree that contains these nodes\npayload = {\"ottIds\": idList}\nresp = requests.post('https://api.opentreeoflife.org/treemachine/v1/getDraftTreeSubtreeForNodes',data=payload)\ntree = str(resp.json()[\"subtree\"])\n# tree = json.dumps(resp.json(), indent=2)\n",
                "mode": "python",
                "name": "GetOTLtreeFromTableWithIDs",
                "outputs": [
                    {
                        "format": "newick",
                        "type": "tree",
                        "description": "output tree returned from OTL",
                        "name": "tree"
                    }
                ],
                "x": 1015,
                "y": 137
            }
        }
    ],
    "mode": "workflow"
}
